https://scotch.io/bar-talk/processing-incoming-request-data-in-flask

In this tutorial, we'll go through how to process incoming data for the most common use cases.
The forms of incoming data we'll cover are: 
 - query strings, 
 - form data, and 
 - JSON objects. 
 
To demonstrate these cases, we'll build a simple example app with three routes that accept either query string data, form data, or JSON data.

To process incoming data in Flask, we have to use the Request Object

QUERY STRINGS

example.com?arg1=value1&arg2=value2

This is a simple query which starts at the end of '?'
It has key-value pairs;
    key- arg1 value- value1
    key- arg2 value- value2

If we wanted our app to run the following query
    http://127.0.0.1:5000/query-example?language=Python

nothing would happen because the app doesn't know how to handle such queries.

Enter REQUESTS
By calling 
    request.args.get('language'),
our application will continue to run if the language key doesn't exist in the URL. In that case, the result of the method displayed on screen will be 'None'. 

If we use 
    request.args['language'], 
the app will return a 400 error if language key doesn't exist in the URL. 

For query strings, use request.args.get() because of how easy it is for the user to modify the URL. If they remove one of the keys, request.args.get() will prevent the app from failing.

FORM DATA
Form data comes from a form that has been sent as a POST request to a route.

Similarly use request.form.get() or request.form[]

JSON DATA
First, to send a JSON object, we'll need a program capable of sending custom requests to URLs.
For this, we can use an app called Postman.

All JSON objects will be converted into a Python dictionary, with key - values, by Flask.
A JSON array will be converted into a Python List
Then the values inside of quotes in the JSON object become strings in Python;
true and false become True and False in Python.
Numbers without quotes around them become numbers in Python.

Steps:
    1. Assign everything from the JSON object into a variable
            req_data = request.get_json()
        converts the JSON object into Python data